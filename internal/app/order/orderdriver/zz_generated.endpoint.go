//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package orderdriver

import (
	"context"
	"errors"
	"github.com/dgnydn/binance-order/internal/app/order"
	dto "github.com/dgnydn/binance-order/internal/app/order/dto"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateOrder  endpoint.Endpoint
	DeleteOrder  endpoint.Endpoint
	GetAllOrders endpoint.Endpoint
	GetOrder     endpoint.Endpoint
	UpdateOrder  endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service order.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		CreateOrder:  kitxendpoint.OperationNameMiddleware("order.CreateOrder")(mw(MakeCreateOrderEndpoint(service))),
		DeleteOrder:  kitxendpoint.OperationNameMiddleware("order.DeleteOrder")(mw(MakeDeleteOrderEndpoint(service))),
		GetAllOrders: kitxendpoint.OperationNameMiddleware("order.GetAllOrders")(mw(MakeGetAllOrdersEndpoint(service))),
		GetOrder:     kitxendpoint.OperationNameMiddleware("order.GetOrder")(mw(MakeGetOrderEndpoint(service))),
		UpdateOrder:  kitxendpoint.OperationNameMiddleware("order.UpdateOrder")(mw(MakeUpdateOrderEndpoint(service))),
	}
}

// CreateOrderRequest is a request struct for CreateOrder endpoint.
type CreateOrderRequest struct {
	Request dto.CreateOrderRequest
}

// CreateOrderResponse is a response struct for CreateOrder endpoint.
type CreateOrderResponse struct {
	R0  dto.CreateOrderResponse
	Err error
}

func (r CreateOrderResponse) Failed() error {
	return r.Err
}

// MakeCreateOrderEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCreateOrderEndpoint(service order.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateOrderRequest)

		r0, err := service.CreateOrder(ctx, req.Request)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return CreateOrderResponse{
					Err: err,
					R0:  r0,
				}, nil
			}

			return CreateOrderResponse{
				Err: err,
				R0:  r0,
			}, err
		}

		return CreateOrderResponse{R0: r0}, nil
	}
}

// DeleteOrderRequest is a request struct for DeleteOrder endpoint.
type DeleteOrderRequest struct {
	Request dto.DeleteOrderRequest
}

// DeleteOrderResponse is a response struct for DeleteOrder endpoint.
type DeleteOrderResponse struct {
	R0  dto.DeleteOrderResponse
	Err error
}

func (r DeleteOrderResponse) Failed() error {
	return r.Err
}

// MakeDeleteOrderEndpoint returns an endpoint for the matching method of the underlying service.
func MakeDeleteOrderEndpoint(service order.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteOrderRequest)

		r0, err := service.DeleteOrder(ctx, req.Request)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return DeleteOrderResponse{
					Err: err,
					R0:  r0,
				}, nil
			}

			return DeleteOrderResponse{
				Err: err,
				R0:  r0,
			}, err
		}

		return DeleteOrderResponse{R0: r0}, nil
	}
}

// GetAllOrdersRequest is a request struct for GetAllOrders endpoint.
type GetAllOrdersRequest struct{}

// GetAllOrdersResponse is a response struct for GetAllOrders endpoint.
type GetAllOrdersResponse struct {
	R0  dto.GetAllOrdersResponse
	Err error
}

func (r GetAllOrdersResponse) Failed() error {
	return r.Err
}

// MakeGetAllOrdersEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGetAllOrdersEndpoint(service order.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		r0, err := service.GetAllOrders(ctx)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return GetAllOrdersResponse{
					Err: err,
					R0:  r0,
				}, nil
			}

			return GetAllOrdersResponse{
				Err: err,
				R0:  r0,
			}, err
		}

		return GetAllOrdersResponse{R0: r0}, nil
	}
}

// GetOrderRequest is a request struct for GetOrder endpoint.
type GetOrderRequest struct {
	Request dto.GetOrderRequest
}

// GetOrderResponse is a response struct for GetOrder endpoint.
type GetOrderResponse struct {
	R0  dto.GetOrderResponse
	Err error
}

func (r GetOrderResponse) Failed() error {
	return r.Err
}

// MakeGetOrderEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGetOrderEndpoint(service order.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetOrderRequest)

		r0, err := service.GetOrder(ctx, req.Request)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return GetOrderResponse{
					Err: err,
					R0:  r0,
				}, nil
			}

			return GetOrderResponse{
				Err: err,
				R0:  r0,
			}, err
		}

		return GetOrderResponse{R0: r0}, nil
	}
}

// UpdateOrderRequest is a request struct for UpdateOrder endpoint.
type UpdateOrderRequest struct {
	Request dto.UpdateOrderRequest
}

// UpdateOrderResponse is a response struct for UpdateOrder endpoint.
type UpdateOrderResponse struct {
	R0  dto.UpdateOrderResponse
	Err error
}

func (r UpdateOrderResponse) Failed() error {
	return r.Err
}

// MakeUpdateOrderEndpoint returns an endpoint for the matching method of the underlying service.
func MakeUpdateOrderEndpoint(service order.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(UpdateOrderRequest)

		r0, err := service.UpdateOrder(ctx, req.Request)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return UpdateOrderResponse{
					Err: err,
					R0:  r0,
				}, nil
			}

			return UpdateOrderResponse{
				Err: err,
				R0:  r0,
			}, err
		}

		return UpdateOrderResponse{R0: r0}, nil
	}
}
